<h1 class="page-header">Rails Architecture</h1>
<div class="doc">
  <div class="goals">
    <h1>Goals</h1>
    <ul>
      <li>
        <div class="message">
          <p>Create a database table for topics with a title and a description</p>
        </div>
      </li>
      <div class="message">
        <p>In this step we'll learn a bit about Rails architecture. By the end of this step you should understand the following concepts:</p>
      </div>
      <ul>
        <li>Table</li>
        <li>Model</li>
        <li>View</li>
        <li>Controller</li>
      </ul>
    </ul>
  </div>
  <div class="explanation">
    <h1>Explanation</h1>
    <blockquote>
      <h2>Rails architecture and its relation to the database</h2>
      <%= image_tag 'mvc.png', alt: 'MVC' %>
      <div class="message">
        <p>Rails implements a very specific notion of the <strong>Model/View/Controller</strong> pattern, which guides how you structure your web applications.</p>
      </div>
      <h3>Model</h3>
      <div class="message">
        <ul>
          <li>For all the Models we create in <code>suggestotron</code>, Model objects have a corresponding record in the the database. The name of the table in the database is the plural version of the Model's class name. For example, if the Model is called 'Duck', it will automatically query or write to the 'ducks' table in the database.</li>
          <li>Methods internal to Rails make it easy to automatically write records to the database and query the database to get the records again later.</li>
          <li>The Model is a bridge between the database and your application's code.</li>
        </ul>
      </div>
      <h3>View</h3>
      <div class="message">
        <ul>
          <li>The View generates the HTML that will be displayed in the browser.</li>
          <li>View files are written in ERB, a templating language. It contains HTML with Ruby code embedded in it. The ruby variables in the view stand as placeholders for content that will be filled in when a user requests the page.</li>
          <li>(There are several other templating languages available, but I personally stick to ERB. Have a look at <a href="http://haml.info/">HAML</a> or <a href="http://slim-lang.com/">SLIM</a>)</li>
        </ul>
      </div>
      <h3>Controller</h3>
      <div class="message">
        <ul>
          <li>Controllers pass Ruby objects between the Models and the Views.</li>
          <li>Each url corresponds to a specific method in a Controller.</li>
          <li>After this step, when you visit any page in your application, that request will be handled by a method in a Controller.</li>
        </ul>
      </div>
      <div class="message">
        <h3>Responsibilities</h3>
        <p>When Models, Views and Controllers are all put together, they follow a pattern: Given a URL, Rails will look up which Controller method (also called an "Action") to use. The Controller Action will use methods in a corresponding Model. The Model will need to read or write to the database, and return an object containing that data to the Controller. The Controller will take that object and pass it to the View. (Actions normally have a corresponding View file, and Rails will automatically find and use that file.)</p>

        <p>Models, Views and Controllers each have specific jobs.  Separating responsibilities like this make it easier to develop, especially as it gets bigger. (When each file has a clear responsibility it's easier to fix problems and add new features.)</p>
      </div>
    </blockquote>
  </div>
</div>